{"version":3,"sources":["components/map/Map.jsx","utils/map/addBorder.js","utils/map/addPointMarker.js","redux/actions/types.js","redux/actions/country/getCountry.js","redux/actions/latestRates/latestRates.js","redux/actions/symbols/symbols.js","data/countryCodes.js","components/control/MUIControl.jsx","App.js","redux/reducers/country/getCountryReducer.js","redux/reducers/latestRates/latestRatesReducer.js","redux/reducers/symbols/symbolsReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["style","overflow","width","height","maps","light","L","tileLayer","dark","spinal","process","country","border","layerGroup","point_marker","mapParams","center","zoom","zoomControl","maxBounds","latLngBounds","latLng","layers","connect","state","latest_rates","latestRates","country_data","getCountry","useEffect","map","baseMaps","overlayMaps","control","addTo","position","border_layer","data","clearLayers","color","geoJSON","geojson","weight","opacity","fillOpacity","on","setStyle","fillColor","error","console","log","addBorder","point_marker_layer","base_currency","rates","base","marker","lat","lon","bindPopup","USD","GBP","JPY","EUR","BTC","openPopup","addPointMarker","id","types","GET_COUNTRY_REQUEST","GET_COUNTRY_SUCCESS","GET_COUNTRY_FAILURE","GET_LATEST_RATES_REQUEST","GET_LATEST_RATES_SUCCESS","GET_LATEST_RATES_FAILURE","GET_SYMBOLS_REQUEST","GET_SYMBOLS_SUCCESS","GET_SYMBOLS_FAILURE","getCountrySuccess","response","type","payload","getCountryData","dispatch","EuropeanContinentalData","features","url","api","args","axios","get","then","catch","getCountryFailure","getLatestRates","currency_code","access_key","base_symbol","symbols","getLatestRatesSuccess","getLatestRatesFailure","getSymbols","key","getSymbolsSuccess","getSymbolsFailure","codes","BootstrapInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","backgroundColor","palette","background","paper","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","inputStyles","makeStyles","margin","paperStyles","zIndex","top","left","minHeight","maxHeight","paperClasses","inputClasses","useState","setCountry","symbolOptions","setSymbolsOptions","selectedCurrency","setSelectedCurrency","dropdown_options","Object","entries","symbol","text","value","Paper","className","elevation","Grid","item","xs","Typography","variant","gutterBottom","align","listStyle","textAlign","href","target","rel","Divider","FormControl","FormHelperText","Select","labelId","onChange","event","minWidth","maxWidth","MenuItem","md","List","dense","ListItem","ListItemIcon","ListItemText","primary","initialState","get_country_loading","get_country_status","get_country_error","getCountryReducer","action","status","get_latest_rates_loading","get_latest_rates_status","get_latest_rates_error","latestRatesReducer","symbols_loading","symbols_error","symbolsReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAaMA,G,kBAAQ,CACVC,SAAU,SACVC,MAAO,OACPC,OAAQ,UAMNC,EAAO,CACTC,MAAOC,IAAEC,UAAU,oGACnBC,KAAMF,IAAEC,UAAU,6EAClBE,OAAQH,IAAEC,UAAF,+EALgBG,sCAQtBC,EAAU,CACZC,OAAQN,IAAEO,aACVC,aAAcR,IAAEO,cAIdE,EAAY,CACdC,OAAQ,CAAC,IAAK,IACdC,KAAM,EACNC,aAAa,EACbC,UAAWb,IAAEc,aAAad,IAAEe,QAAQ,KAAM,KAAMf,IAAEe,OAAO,IAAK,MAC9DC,OAAQ,CACJlB,EAAKC,MACLM,EAAQC,OACRD,EAAQG,eAmEDS,eAfS,SAAAC,GACpB,MAAO,CACHC,aAAcD,EAAME,YAAYD,aAChCE,aAAcH,EAAMI,WAAWD,iBAKZ,SAAAH,GACvB,MAAO,KAMID,EA/DH,SAAC,GAGN,IAFHI,EAEE,EAFFA,aACAF,EACE,EADFA,aAwCA,OApCAI,qBAAU,WACN,IAAMC,EAAMxB,IAAEwB,IAAI,MAAOf,GAGnBgB,EAAW,CACb,cAAiB3B,EAAKC,MACtB,cAAiBD,EAAKI,KACtB,UAAaJ,EAAKK,QAGhBuB,EAAc,CAChB,iBAAkBrB,EAAQC,QAI9BN,IAAE2B,QACGX,OAAOS,EAAUC,GACjBE,MAAMJ,GAIXxB,IAAE2B,QACGhB,KAAK,CAACkB,SAAU,aAChBD,MAAMJ,KAEZ,IAGHD,qBAAU,WACFF,IC/Ea,SACrBS,EACAC,GAGA,GADAD,EAAaE,cACTD,IAAS,GAAI,CAEb,IAAME,EAAQ,mBACd,IACI,IAAI3B,EAASN,IAAEkC,QAAQH,EAAKI,QAAS,CACjCF,QACAG,OAAQ,EACRC,QAAS,EACTC,YAAa,IAEZV,MAAME,GACXxB,EAAOiC,GAAG,aAAa,WACnBjC,EAAOkC,SAAS,CAACC,UAAWR,EAAOK,YAAa,QAEpDhC,EAAOiC,GAAG,YAAY,WAClBjC,EAAOkC,SAAS,CAACF,YAAa,OAEpC,MAAOI,GACLC,QAAQC,IAAIF,KD0DZG,CAAUxC,EAAQC,OAAQe,GEjFR,SAC1ByB,EACAf,EACAZ,GAGA,IAAI4B,EACAC,EAQJ,GAVAL,QAAQC,IAAIzB,GAGRA,IACA4B,EAAgB5B,EAAa8B,KAC7BD,EAAQ7B,EAAa6B,OAEzBL,QAAQC,IAAIG,EAAeC,GAC3BF,EAAmBd,cACnBW,QAAQC,IAAIzB,GACRY,IAAS,GACT,IACI/B,IAAEkD,OACE,CAACnB,EAAKoB,IAAKpB,EAAKqB,MAEfxB,MAAMkB,GACNO,UAJL,kCAI0CN,EAJ1C,8DAI6GC,EAAMM,IAJnH,yBAIuIN,EAAMO,IAJ7I,yBAIiKP,EAAMQ,IAJvK,yBAI2LR,EAAMS,IAJjM,yBAIqNT,EAAMU,IAJ3N,2BAKKC,YACP,MAAOjB,GACLC,QAAQC,IAAIF,IF0DZkB,CAAevD,EAAQG,aAAca,EAAcF,MAExD,CAACE,EAAcF,IAGd,yBAAK0C,GAAG,MAAMnE,MAAOA,O,+LGzEdoE,EAhBD,CAEVC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,oBAAqB,sBAErBC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,yBAA0B,2BAE1BC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,oBAAqB,uB,QCDnBC,EAAoB,SAAAC,GACtB,MAAO,CACHC,KAAMZ,EAAME,oBACZW,QAASF,IAYJG,EAAiB,SAAAvE,GAC1B,OAAO,SAAAwE,GAEH,GADAA,EAvBG,CACHH,KAAMZ,EAAMC,sBAuBI,mBAAZ1D,EAA8B,CAC9B,IAAM0B,EAAO,CAACA,KAAM+C,EAAwBC,UAC5CF,EAASL,EAAkBzC,QACxB,CACH,IAAMiD,EAAM,CACR/B,KAAM,sCACNgC,IAAI,aAAD,OAAe5E,GAClB6E,KAAM,kCAEVC,IAAMC,IAAN,UAAaJ,EAAI/B,MAAjB,OAAwB+B,EAAIC,KAA5B,OAAkCD,EAAIE,OACjCG,MAAK,SAAAZ,GACFI,EAASL,EAAkBC,OAE9Ba,OAAM,SAAA5C,GACHmC,EAxBM,SAAAnC,GACtB,MAAO,CACHgC,KAAMZ,EAAMG,oBACZU,QAASjC,GAqBY6C,CAAkB7C,UCflC8C,EAAiB,SAAAC,GAC1B,IAAMT,EAAM,CACR/B,KAAM,yBACNgC,IAAK,aACLS,WAAW,eAAD,OA7BOtF,oCA8BjBuF,YAAY,SAAD,OAAWF,GACtBG,QAAS,iCAEb,OAAO,SAAAf,GACHA,EA/BG,CACHH,KAAMZ,EAAMI,2BA+BZiB,IAAMC,IAAN,UAAaJ,EAAI/B,MAAjB,OAAwB+B,EAAIC,KAA5B,OAAkCD,EAAIU,YAAtC,OAAmDV,EAAIW,aAAvD,OAAqEX,EAAIY,UACpEP,MAAK,SAAAZ,GACFI,EA5Bc,SAAAJ,GAC1B,MAAO,CACHC,KAAMZ,EAAMK,yBACZQ,QAASF,GAyBQoB,CAAsBpB,OAElCa,OAAM,SAAA5C,GACHmC,EAvBc,SAAAnC,GAC1B,MAAO,CACHgC,KAAMZ,EAAMM,yBACZO,QAASjC,GAoBQoD,CAAsBpD,SCflCqD,EAAa,WACtB,OAAO,SAAAlB,GACHA,EAvBG,CACHH,KAAMZ,EAAMO,sBAuBZ,IAAMW,EAAM,CACR/B,KAAM,wBACNgC,IAAI,cACJe,IAAI,eAAD,OA/BU5F,qCAiCjB+E,IAAMC,IAAN,UAAaJ,EAAI/B,MAAjB,OAAwB+B,EAAIC,KAA5B,OAAkCD,EAAIgB,MACjCX,MAAK,SAAAZ,GACFI,EAzBU,SAAAJ,GACtB,MAAO,CACHC,KAAMZ,EAAMQ,oBACZK,QAASF,GAsBQwB,CAAkBxB,EAAS1C,KAAK6D,aAE5CN,OAAM,SAAA5C,GACHmC,EArBU,SAAAnC,GACtB,MAAO,CACHgC,KAAMZ,EAAMS,oBACZI,QAASjC,GAkBQwD,CAAkBxD,SC4I5ByD,EArLD,CACV,IAAQ,uBACR,IAAQ,cACR,IAAQ,UACR,IAAQ,UACR,IAAQ,uBACR,IAAQ,SACR,IAAQ,YACR,IAAQ,YACR,IAAQ,QACR,IAAQ,aACR,IAAQ,yBACR,IAAQ,WACR,IAAQ,aACR,IAAQ,WACR,IAAQ,UACR,IAAQ,UACR,IAAQ,UACR,IAAQ,SACR,IAAQ,UACR,IAAQ,UACR,IAAQ,SACR,IAAQ,UACR,IAAQ,SACR,IAAQ,WACR,IAAQ,UACR,IAAQ,SACR,IAAQ,SACR,IAAQ,+BACR,IAAQ,cACR,IAAQ,cACR,IAAQ,QACR,IAAQ,QACR,IAAQ,QACR,IAAQ,WACR,IAAQ,WACR,IAAQ,aACR,IAAQ,OACR,IAAQ,aACR,IAAQ,SACR,IAAQ,iBACR,IAAQ,WACR,IAAQ,UACR,IAAQ,qBACR,IAAQ,UACR,IAAQ,UACR,IAAQ,QACR,IAAQ,UACR,IAAQ,WACR,IAAQ,iBACR,IAAQ,OACR,IAAQ,mBACR,IAAQ,iBACR,IAAQ,UACR,IAAQ,QACR,IAAQ,YACR,IAAQ,SACR,IAAQ,SACR,IAAQ,YACR,IAAQ,SACR,IAAQ,0CACR,IAAQ,WACR,IAAQ,UACR,IAAQ,QACR,IAAQ,UACR,IAAQ,YACR,IAAQ,SACR,IAAQ,gBACR,IAAQ,OACR,IAAQ,OACR,IAAQ,UACR,IAAQ,UACR,IAAQ,SACR,IAAQ,QACR,IAAQ,QACR,IAAQ,aACR,IAAQ,WACR,IAAQ,UACR,IAAQ,cACR,IAAQ,cACR,IAAQ,SACR,IAAQ,iBACR,IAAQ,aACR,IAAQ,OACR,IAAQ,UACR,IAAQ,YACR,IAAQ,UACR,IAAQ,UACR,IAAQ,YACR,IAAQ,SACR,IAAQ,QACR,IAAQ,0BACR,IAAQ,UACR,IAAQ,aACR,IAAQ,wCACR,IAAQ,UACR,IAAQ,WACR,IAAQ,sCACR,IAAQ,aACR,IAAQ,QACR,IAAQ,YACR,IAAQ,WACR,IAAQ,SACR,IAAQ,SACR,IAAQ,SACR,IAAQ,WACR,IAAQ,aACR,IAAQ,UACR,IAAQ,UACR,IAAQ,YACR,IAAQ,SACR,IAAQ,QACR,IAAQ,qDACR,IAAQ,OACR,IAAQ,SACR,IAAQ,OACR,IAAQ,mBACR,IAAQ,cACR,IAAQ,WACR,IAAQ,SACR,IAAQ,WACR,IAAQ,QACR,IAAQ,UACR,IAAQ,SACR,IAAQ,SACR,IAAQ,SACR,IAAQ,eACR,IAAQ,kBACR,IAAQ,aACR,IAAQ,QACR,IAAQ,SACR,IAAQ,YACR,IAAQ,eACR,IAAQ,WACR,IAAQ,eACR,IAAQ,UACR,IAAQ,WACR,IAAQ,iCACR,IAAQ,QACR,IAAQ,YACR,IAAQ,WACR,IAAQ,aACR,IAAQ,eACR,IAAQ,UACR,IAAQ,QACR,IAAQ,SACR,IAAQ,sBACR,IAAQ,+FACR,IAAQ,WACR,IAAQ,UACR,IAAQ,SACR,IAAQ,gBACR,IAAQ,UACR,IAAQ,aACR,IAAQ,YACR,IAAQ,UACR,IAAQ,UACR,IAAQ,QACR,IAAQ,4EACR,IAAQ,GACR,IAAQ,GACR,IAAQ,GACR,IAAQ,GACR,IAAQ,GACR,IAAQ,GACR,IAAQ,qIACR,IAAQ,8BACR,IAAQ,qCACR,IAAQ,kCACR,IAAQ,mFACR,IAAQ,GACR,IAAQ,qDACR,IAAQ,GACR,IAAQ,GACR,IAAQ,GACR,IAAQ,QACR,IAAQ,eACR,IAAQ,SACR,IAAQ,YCtJNC,EAAiBC,aAAW,SAACC,GAAD,MAAY,CAC1CC,KAAM,CACJ,YAAa,CACXC,UAAWF,EAAMG,QAAQ,KAG7BC,MAAO,CACLC,aAAc,EACd9E,SAAU,WACV+E,gBAAiBN,EAAMO,QAAQC,WAAWC,MAC1CzG,OAAQ,oBACR0G,SAAU,GACVC,QAAS,sBACTC,WAAYZ,EAAMa,YAAYC,OAAO,CAAC,eAAgB,eAEtDC,WAAY,CACV,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,KACP,UAAW,CACTX,aAAc,EACdY,YAAa,UACbC,UAAW,wCA9BInB,CAiCjBoB,KAEEC,EAAcC,aAAW,SAACrB,GAAD,MAAY,CACzCsB,OAAQ,CACNA,OAAQtB,EAAMG,QAAQ,QAItBoB,EAAcF,aAAW,SAACrB,GAAD,MAAY,CACzCC,KAAM,CACJuB,OAAQ,IACRjG,SAAU,WACVjC,MAAO,QACPmI,IAAK,OACLC,KAAM,OACNC,UAAW,oBACXC,UAAW,oBACXvI,SAAU,OACVsH,QAAS,OACTL,gBAAiB,aAuKN3F,eAfS,SAAAC,GACpB,MAAO,CACL0E,QAAS1E,EAAM0E,QAAQA,QACvBvE,aAAcH,EAAMI,WAAWD,aAC/BF,aAAcD,EAAME,YAAYD,iBAIX,SAAA0D,GACvB,MAAO,CACHD,eAAgB,SAAAvE,GAAO,OAAIwE,EAASD,EAAevE,KACnDmF,eAAgB,SAAAC,GAAa,OAAIZ,EAASW,EAAeC,QAIlDxE,EAlKI,SAAC,GAMb,IALH2E,EAKE,EALFA,QAEAzE,GAGE,EAJFE,aAIE,EAHFF,cACAyD,EAEE,EAFFA,eACAY,EACE,EADFA,eAEM2C,EAAeN,IACfO,EAAeV,IAFnB,EAI4BW,mBAAS,IAJrC,mBAIKhI,EAJL,KAIciI,EAJd,OAKyCD,mBAAS,IALlD,mBAKKE,EALL,KAKoBC,EALpB,OAM8CH,mBAAS,OANvD,mBAMKI,EANL,KAMuBC,EANvB,KAUFnH,qBAAU,WACN,GAAIqE,IAAY,GAAI,CAClB,IAAM+C,EAAmBC,OAAOC,QAAQjD,GACrCpE,KAAI,SAAAsH,GACH,MAAO,CACL9C,IAAK8C,EAAO,GACZC,KAAK,GAAD,OAAKD,EAAO,GAAZ,cAAoBA,EAAO,IAC/BE,MAAOF,EAAO,OAGpBN,EAAkBG,MAErB,CAAC/C,IAEJrE,qBAAU,WACU,KAAZlB,GACAuE,EAAevE,KAEpB,CAACA,EAASuE,IAgBb,OATArD,qBAAU,WACN+G,EAAWnC,EAAMsC,IACjBjD,EAAeiD,KAChB,CAACA,EAAkBjD,IAEtBjE,qBAAU,WACNoB,QAAQC,IAAIzB,KACb,CAACA,IAGA,kBAAC8H,EAAA,EAAD,CAAOC,UAAWf,EAAa5B,KAAM4C,UAAW,GAC5C,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACC,MAAM,UAA5C,yDAIJ,kBAACN,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,cAAY,EAACC,MAAM,UAA/C,0EAGI,wBAAIhK,MAAO,CAAEiK,UAAW,OAAQC,UAAW,SAAU3C,QAAS,MAC1D,4BAAI,6CACJ,4BAAI,oDACJ,4BAAI,kDAIR,2DAC8B,IAC9B,uBACI4C,KAAK,oBACLC,OAAO,SACPC,IAAI,uBAHR,YAKK,IAPL,OAQK,IACL,uBACIF,KAAK,yDACLC,OAAO,SACPC,IAAI,uBAHR,aAKK,IAdL,WAmBR,6BACA,kBAACC,EAAA,EAAD,MACA,6BACA,kBAACZ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACC,MAAM,UAA5C,qBAGA,kBAACO,EAAA,EAAD,CAAaf,UAAWd,EAAaR,QACrC,kBAACsC,EAAA,EAAD,wBACA,kBAACC,EAAA,EAAD,CACIC,QAAQ,+BACRvG,GAAG,yBACHmF,MAAOP,EACP4B,SA/DK,SAAAC,GACjB5B,EAAoB4B,EAAMR,OAAOd,QA+DrBtC,MAAO,kBAACN,EAAD,MACP1G,MAAO,CAAE6K,SAAU,QAASC,SAAU,UAEtC,kBAACC,EAAA,EAAD,CAAUzB,MAAM,IACZ,qCAEHT,EAAc/G,KAAI,SAAAsH,GAAM,OACrB,kBAAC2B,EAAA,EAAD,CAAUzE,IAAK8C,EAAO9C,IAAKgD,MAAOF,EAAOE,OACxCF,EAAOC,YAMpB,6BACA,kBAACK,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IAIX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,cAAY,EAACC,MAAM,UAC3C,kBAACN,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIoB,GAAI,GACnB,kBAACC,EAAA,EAAD,CAAMC,OAAO,GACT,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CACIC,QAAS3K,GAAoB,aAGrC,kBAACwK,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CACIC,QAASvC,GAAsC,sBCnLpExH,eAbS,SAAAC,GACtB,MAAO,CACL0E,QAAS1E,EAAM0E,QAAQA,QACvBvE,aAAcH,EAAMI,WAAWD,iBAIR,SAAAwD,GACzB,MAAO,CACLkB,WAAY,kBAAMlB,EAASkB,SAIhB9E,EAjCH,SAAC,GAIP,EAHJ2E,QAGI,EAFJvE,aAEK,IADL0E,EACI,EADJA,WASA,OAJAxE,qBAAU,WACRwE,MACC,CAACA,IAGA,yBAAKmD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,U,eCrBF+B,EAAe,CACjBC,qBAAqB,EACrBC,mBAAoB,KACpB9J,aAAc,GACd+J,kBAAmB,IAgCRC,EA5BW,WAAmC,IAAlCnK,EAAiC,uDAAzB+J,EAAcK,EAAW,uCACxD,OAAOA,EAAO5G,MACV,KAAKZ,EAAMC,oBACP,OAAO,2BACA7C,GADP,IAEIgK,qBAAqB,EACrBC,mBAAoB,KACpB9J,aAAc,GACd+J,kBAAmB,KAE3B,KAAKtH,EAAME,oBACP,OAAO,2BACA9C,GADP,IAEIgK,qBAAqB,EACrB7J,aAAciK,EAAO3G,QAAQ5C,KAAK,GAClCoJ,mBAAoBG,EAAO3G,QAAQ4G,SAE3C,KAAKzH,EAAMG,oBACP,OAAO,2BACA/C,GADP,IAEIgK,qBAAqB,EACrBE,kBAAmBE,EAAO3G,UAElC,QAAS,OAAOzD,IC/BlB+J,EAAe,CACjBO,0BAA0B,EAC1BC,wBAAyB,KACzBC,uBAAwB,GACxBvK,aAAc,IA+BHwK,GA3BY,WAAmC,IAAlCzK,EAAiC,uDAAzB+J,EAAcK,EAAW,uCACzD,OAAOA,EAAO5G,MACV,KAAKZ,EAAMI,yBACP,OAAO,2BACAhD,GADP,IAEIsK,0BAA0B,EAC1BC,wBAAyB,KACzBC,uBAAwB,GACxBvK,aAAc,KAEtB,KAAK2C,EAAMK,yBACP,OAAO,2BACAjD,GADP,IAEIsK,0BAA0B,EAC1BC,wBAAyBH,EAAO3G,QAAQ4G,OACxCpK,aAAcmK,EAAO3G,QAAQ5C,OAErC,KAAK+B,EAAMM,yBACP,OAAO,2BACAlD,GADP,IAEIwK,uBAAwBJ,EAAO3G,UAEvC,QAAS,OAAOzD,IC9BlB+J,GAAe,CACjBrF,QAAS,GACTgG,iBAAiB,EACjBC,cAAe,IA4BJC,GAxBQ,WAAmC,IAAlC5K,EAAiC,uDAAzB+J,GAAcK,EAAW,uCACrD,OAAOA,EAAO5G,MACV,KAAKZ,EAAMO,oBACP,OAAO,2BACAnD,GADP,IAEI0K,iBAAiB,IAEzB,KAAK9H,EAAMQ,oBACP,OAAO,2BACApD,GADP,IAEI0K,iBAAiB,EACjBhG,QAAS0F,EAAO3G,UAExB,KAAKb,EAAMS,oBACP,OAAO,2BACArD,GADP,IAEI0K,iBAAiB,EACjBlJ,MAAO4I,EAAO3G,UAEtB,QAAS,OAAOzD,IChBT6K,GAPKC,YAAgB,CAChC1K,WAAY+J,EACZjK,YAAauK,GACb/F,QAASkG,K,6BCAEG,GAHDC,YAAYH,GAAaI,YAAgBC,KAAQC,OCC/DC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,EAAD,QAGJQ,SAASC,eAAe,U","file":"static/js/main.0b1a06bb.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\n\nimport { connect } from 'react-redux'\n\nimport L from 'leaflet'\n\nimport 'leaflet/dist/leaflet.css'\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css'\nimport 'leaflet-defaulticon-compatibility'\n\nimport { addBorder, addPointMarker } from '../../utils'\n\n// Define the container styles the map sits in:\nconst style = {\n    overflow: 'hidden',\n    width: '100%',\n    height: '100vh',\n}\n\n// ThunderForest api key for base map tiles:\nconst thunderforestAPIkey = process.env.REACT_APP_THUNDERFOREST_API_KEY\n\nconst maps = {\n    light: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}'),\n    dark: L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png'),\n    spinal: L.tileLayer(`https://{s}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png?apikey=${thunderforestAPIkey}`),\n}\n\nconst country = {\n    border: L.layerGroup(),\n    point_marker: L.layerGroup(),\n}\n\n// Params to be passed to the map:\nconst mapParams = {\n    center: [20, -20],\n    zoom: 3,\n    zoomControl: false,\n    maxBounds: L.latLngBounds(L.latLng(-150, -250), L.latLng(150, 250)),\n    layers: [\n        maps.light,\n        country.border,\n        country.point_marker,\n    ]\n}\n\nconst Map = ({\n    country_data,\n    latest_rates,\n}) => {\n\n    // When component is first rendered:\n    useEffect(() => {\n        const map = L.map('map', mapParams)\n\n        // Set Base map in Layer control:\n        const baseMaps = {\n            'OpenStreetMap': maps.light,\n            'DarkStreetMap': maps.dark,\n            'SpinalMap': maps.spinal,\n        }\n\n        const overlayMaps = {\n            'Country Border': country.border\n        }\n\n        // Create the layer control:\n        L.control\n            .layers(baseMaps, overlayMaps)\n            .addTo(map)\n        //\n\n        // Add a zoom control:\n        L.control\n            .zoom({position: \"topright\"})\n            .addTo(map)\n        //\n    }, [])\n\n    // Any time country_data updates:\n    useEffect(() => {\n        if (country_data) {\n            // console.log(country_data)\n            addBorder(country.border, country_data)\n            addPointMarker(country.point_marker, country_data, latest_rates)\n        }\n    }, [country_data, latest_rates])\n\n    return (\n        <div id=\"map\" style={style} />\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        latest_rates: state.latestRates.latest_rates,\n        country_data: state.getCountry.country_data,\n    }\n}\n\n\nconst mapDispatchToProps = state => {\n    return {\n\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map)","import L from 'leaflet'\n\nexport const addBorder = (\n    border_layer, \n    data,\n) => {\n    border_layer.clearLayers()\n    if (data !== []) {\n        // const color = chroma.random()\n        const color = 'rgb(65, 83, 175)'\n        try {\n            let border = L.geoJSON(data.geojson, {\n                color,\n                weight: 2,\n                opacity: 1,\n                fillOpacity: 0.0 \n            })\n                .addTo(border_layer)\n            border.on('mouseover', () => {\n                border.setStyle({fillColor: color, fillOpacity: 0.6})\n            })\n            border.on('mouseout', () => {\n                border.setStyle({fillOpacity: 0.0})\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    } \n}","import L from 'leaflet'\n\nexport const addPointMarker = (\n    point_marker_layer,\n    data,\n    latest_rates,\n) => {\n    console.log(latest_rates)\n    let base_currency\n    let rates\n    if (latest_rates) {\n        base_currency = latest_rates.base\n        rates = latest_rates.rates\n    }\n    console.log(base_currency, rates)\n    point_marker_layer.clearLayers()\n    console.log(latest_rates)\n    if (data !== []) {\n        try {\n            L.marker(\n                [data.lat, data.lon]\n            )\n                .addTo(point_marker_layer)\n                .bindPopup(`<div><div><h3>Currency: ${base_currency}</h3></div><div><h5>Exhange Rates</h5><ul><li>USD: ${rates.USD}</li><li>GBP: ${rates.GBP}</li><li>JPY: ${rates.JPY}</li><li>EUR: ${rates.EUR}</li><li>BTC: ${rates.BTC}</li></ul></div></div>`)\n                .openPopup()\n        } catch (error) {\n            console.log(error)\n        }\n    } \n}","const types = {\n\n    GET_COUNTRY_REQUEST: 'GET_COUNTRY_REQUEST',\n    GET_COUNTRY_SUCCESS: 'GET_COUNTRY_SUCCESS',\n    GET_COUNTRY_FAILURE: 'GET_COUNTRY_FAILURE',\n\n    GET_LATEST_RATES_REQUEST: 'GET_LATEST_RATES_REQUEST',\n    GET_LATEST_RATES_SUCCESS: 'GET_LATEST_RATES_SUCCESS',\n    GET_LATEST_RATES_FAILURE: 'GET_LATEST_RATES_FAILURE',\n\n    GET_SYMBOLS_REQUEST: \"GET_SYMBOLS_REQUEST\",\n    GET_SYMBOLS_SUCCESS: \"GET_SYMBOLS_SUCCESS\",\n    GET_SYMBOLS_FAILURE: \"GET_SYMBOLS_FAILURE\",\n}\n\n\nexport default types","import axios from 'axios'\nimport types from '../types'\nimport EuropeanContinentalData from '../../../data/Europe.json'\n\nconst getCountryRequest = () => {\n    return {\n        type: types.GET_COUNTRY_REQUEST,\n    }\n}\n\n\nconst getCountrySuccess = response => {\n    return {\n        type: types.GET_COUNTRY_SUCCESS,\n        payload: response,\n    }\n}\n\n\nconst getCountryFailure = error => {\n    return {\n        type: types.GET_COUNTRY_FAILURE,\n        payload: error,\n    }\n}\n\nexport const getCountryData = country => {\n    return dispatch => {\n        dispatch(getCountryRequest())\n        if (country === 'European Union') {\n            const data = {data: EuropeanContinentalData.features}\n            dispatch(getCountrySuccess(data))\n        } else {\n            const url = {\n                base: \"https://nominatim.openstreetmap.org\",\n                api: `/search?q=${country}`,\n                args: \"&polygon_geojson=1&format=json\",\n            }\n            axios.get(`${url.base}${url.api}${url.args}`)\n                .then(response => {\n                    dispatch(getCountrySuccess(response))\n                })\n                .catch(error => {\n                    dispatch(getCountryFailure(error))\n                })\n        }\n    }\n}","import axios from 'axios'\nimport types from '../types'\n\nconst FIXER_IO_API_KEY = process.env.REACT_APP_FIXER_IO_API_KEY\n\nconst getLatestRatesRequest = () => {\n    return {\n        type: types.GET_LATEST_RATES_REQUEST,\n    }\n}\n\n\nconst getLatestRatesSuccess = response => {\n    return {\n        type: types.GET_LATEST_RATES_SUCCESS,\n        payload: response,\n    }\n}\n\n\nconst getLatestRatesFailure = error => {\n    return {\n        type: types.GET_LATEST_RATES_FAILURE,\n        payload: error,\n    }\n}\n\n\nexport const getLatestRates = currency_code => {\n    const url = {\n        base: \"https://data.fixer.io/\",\n        api: \"api/latest\",\n        access_key: `?access_key=${FIXER_IO_API_KEY}`,\n        base_symbol: `&base=${currency_code}`,\n        symbols: '&symbols=USD,GBP,JPY,EUR, BTC'\n    }\n    return dispatch => {\n        dispatch(getLatestRatesRequest())\n        axios.get(`${url.base}${url.api}${url.access_key}${url.base_symbol}${url.symbols}`)\n            .then(response => {\n                dispatch(getLatestRatesSuccess(response))\n            })\n            .catch(error => {\n                dispatch(getLatestRatesFailure(error))\n            })\n    }\n\n}","import axios from 'axios'\nimport types from '../types'\n\nconst FIXER_IO_API_KEY = process.env.REACT_APP_FIXER_IO_API_KEY\n\n\nconst getSymbolsRequest = () => {\n    return {\n        type: types.GET_SYMBOLS_REQUEST\n    }\n}\n\n\nconst getSymbolsSuccess = response => {\n    return {\n        type: types.GET_SYMBOLS_SUCCESS,\n        payload: response\n    }\n}\n\nconst getSymbolsFailure = error => {\n    return {\n        type: types.GET_SYMBOLS_FAILURE,\n        payload: error\n    }\n}\n\n\nexport const getSymbols = () => {\n    return dispatch => {\n        dispatch(getSymbolsRequest())\n        const url = {\n            base: 'http://data.fixer.io/',\n            api: `api/symbols`,\n            key: `?access_key=${FIXER_IO_API_KEY}`\n        }\n        axios.get(`${url.base}${url.api}${url.key}`)\n            .then(response => {\n                dispatch(getSymbolsSuccess(response.data.symbols))\n            })\n            .catch(error => {\n                dispatch(getSymbolsFailure(error))\n            })\n    }\n}","const codes = {\n    \"AED\" : \"United Arab Emirates\",\n    \"AFN\" : \"Afghanistan\",\n    \"ALL\" : \"Albania\",\n    \"AMD\" : \"Armenia\",\n    \"ANG\" : \"Netherlands Antilles\",\n    \"AOA\" : \"Angola\",\n    \"ARS\" : \"Argentina\",\n    \"AUD\" : \"Australia\",\n    \"AWG\" : \"Aruba\",\n    \"AZN\" : \"Azerbaijan\",\n    \"BAM\" : \"Bosnia and Herzegovina\",\n    \"BBD\" : \"Barbados\",\n    \"BDT\" : \"Bangladesh\",\n    \"BGN\" : \"Bulgaria\",\n    \"BHD\" : \"Bahrain\",\n    \"BIF\" : \"Burundi\",\n    \"BMD\" : \"Bermuda\",\n    \"BND\" : \"Brunei\",\n    \"BOB\" : \"Bolivia\",\n    \"BOV\" : \"Bolivia\",\n    \"BRL\" : \"Brazil\",\n    \"BSD\" : \"Bahamas\",\n    \"BTN\" : \"Bhutan\",\n    \"BWP\" : \"Botswana\",\n    \"BYR\" : \"Belarus\",\n    \"BZD\" : \"Belize\",\n    \"CAD\" : \"Canada\",\n    \"CDF\" : \"Democratic Republic of Congo\",\n    \"CHF\" : \"Switzerland\",\n    \"CHW\" : \"Switzerland\",\n    \"CLF\" : \"Chile\",\n    \"CLP\" : \"Chile\",\n    \"CNY\" : \"China\",\n    \"COP\" : \"Colombia\",\n    \"COU\" : \"Colombia\",\n    \"CRC\" : \"Costa Rica\",\n    \"CUP\" : \"Cuba\",\n    \"CVE\" : \"Cape Verde\",\n    \"CYP\" : \"Cyprus\",\n    \"CZK\" : \"Czech Republic\",\n    \"DJF\" : \"Djibouti\",\n    \"DKK\" : \"Denmark\",\n    \"DOP\" : \"Dominican Republic\",\n    \"DZD\" : \"Algeria\",\n    \"EEK\" : \"Estonia\",\n    \"EGP\" : \"Egypt\",\n    \"ERN\" : \"Eritrea\",\n    \"ETB\" : \"Ethiopia\",\n    \"EUR\" : \"European Union\",\n    \"FJD\" : \"Fiji\",\n    \"FKP\" : \"Falkland Islands\",\n    \"GBP\" : \"United Kingdom\",\n    \"GEL\" : \"Georgia\",\n    \"GHS\" : \"Ghana\",\n    \"GIP\" : \"Gibraltar\",\n    \"GMD\" : \"Gambia\",\n    \"GNF\" : \"Guinea\",\n    \"GTQ\" : \"Guatemala\",\n    \"GYD\" : \"Guyana\",\n    \"HKD\" : \"Hong Kong Special Administrative Region\",\n    \"HNL\" : \"Honduras\",\n    \"HRK\" : \"Croatia\",\n    \"HTG\" : \"Haiti\",\n    \"HUF\" : \"Hungary\",\n    \"IDR\" : \"Indonesia\",\n    \"ILS\" : \"Israel\",\n    \"INR\" : \"Bhutan, India\",\n    \"IQD\" : \"Iraq\",\n    \"IRR\" : \"Iran\",\n    \"ISK\" : \"Iceland\",\n    \"JMD\" : \"Jamaica\",\n    \"JOD\" : \"Jordan\",\n    \"JPY\" : \"Japan\",\n    \"KES\" : \"Kenya\",\n    \"KGS\" : \"Kyrgyzstan\",\n    \"KHR\" : \"Cambodia\",\n    \"KMF\" : \"Comoros\",\n    \"KPW\" : \"North Korea\",\n    \"KRW\" : \"South Korea\",\n    \"KWD\" : \"Kuwait\",\n    \"KYD\" : \"Cayman Islands\",\n    \"KZT\" : \"Kazakhstan\",\n    \"LAK\" : \"Laos\",\n    \"LBP\" : \"Lebanon\",\n    \"LKR\" : \"Sri Lanka\",\n    \"LRD\" : \"Liberia\",\n    \"LSL\" : \"Lesotho\",\n    \"LTL\" : \"Lithuania\",\n    \"LVL\" : \"Latvia\",\n    \"LYD\" : \"Libya\",\n    \"MAD\" : \"Morocco, Western Sahara\",\n    \"MDL\" : \"Moldova\",\n    \"MGA\" : \"Madagascar\",\n    \"MKD\" : \"Former Yugoslav Republic of Macedonia\",\n    \"MMK\" : \"Myanmar\",\n    \"MNT\" : \"Mongolia\",\n    \"MOP\" : \"Macau Special Administrative Region\",\n    \"MRO\" : \"Mauritania\",\n    \"MTL\" : \"Malta\",\n    \"MUR\" : \"Mauritius\",\n    \"MVR\" : \"Maldives\",\n    \"MWK\" : \"Malawi\",\n    \"MXN\" : \"Mexico\",\n    \"MXV\" : \"Mexico\",\n    \"MYR\" : \"Malaysia\",\n    \"MZN\" : \"Mozambique\",\n    \"NAD\" : \"Namibia\",\n    \"NGN\" : \"Nigeria\",\n    \"NIO\" : \"Nicaragua\",\n    \"NOK\" : \"Norway\",\n    \"NPR\" : \"Nepal\",\n    \"NZD\" : \"Cook Islands, New Zealand, Niue, Pitcairn, Tokelau\",\n    \"OMR\" : \"Oman\",\n    \"PAB\" : \"Panama\",\n    \"PEN\" : \"Peru\",\n    \"PGK\" : \"Papua New Guinea\",\n    \"PHP\" : \"Philippines\",\n    \"PKR\" : \"Pakistan\",\n    \"PLN\" : \"Poland\",\n    \"PYG\" : \"Paraguay\",\n    \"QAR\" : \"Qatar\",\n    \"RON\" : \"Romania\",\n    \"RSD\" : \"Serbia\",\n    \"RUB\" : \"Russia\",\n    \"RWF\" : \"Rwanda\",\n    \"SAR\" : \"Saudi Arabia\",\n    \"SBD\" : \"Solomon Islands\",\n    \"SCR\" : \"Seychelles\",\n    \"SDG\" : \"Sudan\",\n    \"SEK\" : \"Sweden\",\n    \"SGD\" : \"Singapore\",\n    \"SHP\" : \"Saint Helena\",\n    \"SKK\" : \"Slovakia\",\n    \"SLL\" : \"Sierra Leone\",\n    \"SOS\" : \"Somalia\",\n    \"SRD\" : \"Suriname\",\n    \"STD\" : \"São Tomé and Príncipe\",\n    \"SYP\" : \"Syria\",\n    \"SZL\" : \"Swaziland\",\n    \"THB\" : \"Thailand\",\n    \"TJS\" : \"Tajikistan\",\n    \"TMM\" : \"Turkmenistan\",\n    \"TND\" : \"Tunisia\",\n    \"TOP\" : \"Tonga\",\n    \"TRY\" : \"Turkey\",\n    \"TTD\" : \"Trinidad and Tobago\",\n    \"TWD\" : \"Taiwan and other islands that are under the effective control of the Republic of China (ROC)\",\n    \"TZS\" : \"Tanzania\",\n    \"UAH\" : \"Ukraine\",\n    \"UGX\" : \"Uganda\",\n    \"USD\" : \"United States\",\n    \"UYU\" : \"Uruguay\",\n    \"UZS\" : \"Uzbekistan\",\n    \"VEB\" : \"Venezuela\",\n    \"VND\" : \"Vietnam\",\n    \"VUV\" : \"Vanuatu\",\n    \"WST\" : \"Samoa\",\n    \"XAF\" : \"Cameroon, Central African Republic, Congo, Chad, Equatorial Guinea, Gabon\",\n    \"XAG\" : \"\",\n    \"XAU\" : \"\",\n    \"XBA\" : \"\",\n    \"XBB\" : \"\",\n    \"XBC\" : \"\",\n    \"XBD\" : \"\",\n    \"XCD\" : \"Anguilla, Antigua and Barbuda, Dominica, Grenada, Montserrat, Saint Kitts and Nevis, Saint Lucia, Saint Vincent and the Grenadines\",\n    \"XDR\" : \"International Monetary Fund\",\n    \"XFO\" : \"Bank for International Settlements\",\n    \"XFU\" : \"International Union of Railways\",\n    \"XOF\" : \"Benin, Burkina Faso, Côte d'Ivoire, Guinea-Bissau, Mali, Niger, Senegal, Togo\",\n    \"XPD\" : \"\",\n    \"XPF\" : \"French Polynesia, New Caledonia, Wallis and Futuna\",\n    \"XPT\" : \"\",\n    \"XTS\" : \"\",\n    \"XXX\" : \"\",\n    \"YER\" : \"Yemen\",\n    \"ZAR\" : \"South Africa\",\n    \"ZMK\" : \"Zambia\",\n    \"ZWD\" : \"Zimbabwe\"\n}\n\nexport default codes","import React, { useEffect, useState } from 'react'\n\nimport { connect } from 'react-redux'\n\nimport { makeStyles, withStyles  } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport InputBase from '@material-ui/core/InputBase'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport PinDropIcon from '@material-ui/icons/PinDrop'\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn'\n\nimport {\n    getCountryData,\n    getLatestRates,\n} from '../../redux'\n\nimport codes from '../../data/countryCodes'\n\nconst BootstrapInput = withStyles((theme) => ({\n    root: {\n      'label + &': {\n        marginTop: theme.spacing(3),\n      },\n    },\n    input: {\n      borderRadius: 4,\n      position: 'relative',\n      backgroundColor: theme.palette.background.paper,\n      border: '1px solid #ced4da',\n      fontSize: 16,\n      padding: '10px 26px 10px 12px',\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\n      // Use the system font instead of the default Roboto font.\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(','),\n      '&:focus': {\n        borderRadius: 4,\n        borderColor: '#80bdff',\n        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n      },\n    },\n  }))(InputBase);\n  \n  const inputStyles = makeStyles((theme) => ({\n    margin: {\n      margin: theme.spacing(1),\n    },\n  }));\n\nconst paperStyles = makeStyles((theme) => ({\n  root: {\n    zIndex: 999,\n    position: 'absolute',\n    width: '250px',\n    top: '10px',\n    left: '10px',\n    minHeight: 'calc(100vh - 5vw)',\n    maxHeight: 'calc(100vh - 3vw)',\n    overflow: 'auto',\n    padding: '20px',\n    backgroundColor: 'white'\n  },\n}))\n\n\nconst MUIControl = ({\n    symbols,\n    country_data,\n    latest_rates,\n    getCountryData,\n    getLatestRates,\n}) => {\n    const paperClasses = paperStyles()\n    const inputClasses = inputStyles()\n\n    const [country, setCountry] = useState('')\n    const [symbolOptions, setSymbolsOptions] = useState([])\n    const [selectedCurrency, setSelectedCurrency] = useState('DZD')\n\n    // Prepare the symbol options to pass to the\n    // dropdown menu:\n    useEffect(() => {\n        if (symbols !== {}) {\n          const dropdown_options = Object.entries(symbols)\n            .map(symbol => {\n              return { \n                key: symbol[0], \n                text: `${symbol[0]} - ${symbol[1]}`, \n                value: symbol[0]\n              }\n            })\n          setSymbolsOptions(dropdown_options)\n        }\n    }, [symbols])\n\n    useEffect(() => {\n        if (country !== ''){\n            getCountryData(country)\n        }\n    }, [country, getCountryData])\n\n\n    const handleChange = event => {\n        setSelectedCurrency(event.target.value)\n    }\n\n    useEffect(() => {\n        setCountry(codes[selectedCurrency])\n        getLatestRates(selectedCurrency)\n    }, [selectedCurrency, getLatestRates])\n\n    useEffect(() => {\n        console.log(latest_rates)\n    }, [latest_rates])\n\n    return (\n        <Paper className={paperClasses.root} elevation={3}>\n            <Grid item xs={12}>\n                <Typography variant=\"h5\" gutterBottom align=\"center\">\n                    World Currency Map with React, Redux, and Leaflet.js\n                </Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"body1\" gutterBottom align=\"center\">\n                    Select a currency and receive information about it!\n                    Features available:\n                    <ul style={{ listStyle: 'none', textAlign: 'center', padding: '0'}}>\n                        <li><em>Latest Rates</em></li>\n                        <li><em>Currency Conversion</em></li>\n                        <li><em>Historical Rates</em></li>\n                        {/* <li><em>Time-Series Data</em></li>\n                        <li><em>Fluctuation</em></li> */}\n                    </ul>\n                    <p>\n                    This application consumes the{' '}\n                    <a\n                        href=\"https://fixer.io/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">\n                        Fixer.io\n                    </a>{' '}\n                    and {' '}\n                    <a\n                        href=\"https://nominatim.org/release-docs/develop/api/Search/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">\n                        Nominatim\n                    </a>{' '}\n                    APIs.\n                    </p>\n                </Typography>\n            </Grid>\n            <br />\n            <Divider />\n            <br/>\n            <Grid item xs={12}>\n                <Typography variant=\"h6\" gutterBottom align=\"center\">\n                    Choose A Currency\n                </Typography>\n                <FormControl className={inputClasses.margin}>\n                <FormHelperText>Select Currency</FormHelperText>\n                <Select\n                    labelId=\"demo-customized-select-label\"\n                    id=\"demo-customized-select\"\n                    value={selectedCurrency}\n                    onChange={handleChange}\n                    input={<BootstrapInput />}\n                    style={{ minWidth: '200px', maxWidth: '200px' }}\n                >\n                    <MenuItem value=\"\">\n                        <em>None</em>\n                    </MenuItem>\n                    {symbolOptions.map(symbol => (\n                        <MenuItem key={symbol.key} value={symbol.value}>\n                        {symbol.text}\n                        </MenuItem>\n                    ))}\n                </Select>\n                </FormControl>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n                {/* <Typography variant=\"subtitle1\" gutterBottom>\n                   <strong>Currency Info:</strong>\n                </Typography> */}\n                <Typography variant=\"body1\" gutterBottom align=\"center\">\n                    <Grid item xs={12} md={6}>\n                        <List dense={true}>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <PinDropIcon />\n                                </ListItemIcon>\n                                <ListItemText\n                                    primary={country ? country : \"Country\"}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MonetizationOnIcon />\n                                </ListItemIcon>\n                                <ListItemText\n                                    primary={selectedCurrency ? selectedCurrency : \"Currency\"}\n                                />\n                            </ListItem>\n                        </List>\n                    </Grid>\n                </Typography>\n            </Grid>\n        </Paper>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n      symbols: state.symbols.symbols,\n      country_data: state.getCountry.country_data,\n      latest_rates: state.latestRates.latest_rates,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getCountryData: country => dispatch(getCountryData(country)),\n        getLatestRates: currency_code => dispatch(getLatestRates(currency_code)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MUIControl)","import React, { useEffect } from 'react'\n\nimport { connect } from 'react-redux'\n\nimport Map from './components/map/Map'\nimport MUIControl from './components/control/MUIControl'\n\nimport { getSymbols } from './redux'\n\nconst App = ({\n  symbols,\n  country_data,\n  getSymbols,\n}) => {\n\n  // Get the currency symbols from Fixer.io\n  // on load:\n  useEffect(() => {\n    getSymbols()\n  }, [getSymbols])\n\n  return (\n      <div className=\"App\">\n        <Map />\n        <MUIControl />\n      </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    symbols: state.symbols.symbols,\n    country_data: state.getCountry.country_data,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getSymbols: () => dispatch(getSymbols()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import types from '../../actions/types'\n\n\nconst initialState = { \n    get_country_loading: false,\n    get_country_status: null,\n    country_data: [],\n    get_country_error: '',\n}\n\n\nconst getCountryReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case types.GET_COUNTRY_REQUEST:\n            return {\n                ...state,\n                get_country_loading: true,\n                get_country_status: null,\n                country_data: [],\n                get_country_error: ''\n            }\n        case types.GET_COUNTRY_SUCCESS:\n            return {\n                ...state,\n                get_country_loading: false,\n                country_data: action.payload.data[0],\n                get_country_status: action.payload.status,\n            }\n        case types.GET_COUNTRY_FAILURE:\n            return {\n                ...state,\n                get_country_loading: false,\n                get_country_error: action.payload,\n             }\n        default: return state\n    }\n}\n\n\nexport default getCountryReducer\n","import types from '../../actions/types'\n\n\nconst initialState = {\n    get_latest_rates_loading: false,\n    get_latest_rates_status: null,\n    get_latest_rates_error: '',\n    latest_rates: [],\n}\n\n\nconst latestRatesReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case types.GET_LATEST_RATES_REQUEST:\n            return {\n                ...state,\n                get_latest_rates_loading: false,\n                get_latest_rates_status: null,\n                get_latest_rates_error: '',\n                latest_rates: [],\n            }\n        case types.GET_LATEST_RATES_SUCCESS:\n            return {\n                ...state,\n                get_latest_rates_loading: false,\n                get_latest_rates_status: action.payload.status,\n                latest_rates: action.payload.data\n            }\n        case types.GET_LATEST_RATES_FAILURE:\n            return {\n                ...state,\n                get_latest_rates_error: action.payload\n            }\n        default: return state\n    }\n}\n\n\nexport default latestRatesReducer","import types from '../../actions/types'\n\n\nconst initialState = {\n    symbols: {},\n    symbols_loading: false,\n    symbols_error: [],\n}\n\n\nconst symbolsReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case types.GET_SYMBOLS_REQUEST:\n            return {\n                ...state,\n                symbols_loading: true\n            }\n        case types.GET_SYMBOLS_SUCCESS:\n            return {\n                ...state,\n                symbols_loading: false,\n                symbols: action.payload,\n            }\n        case types.GET_SYMBOLS_FAILURE:\n            return {\n                ...state,\n                symbols_loading: false,\n                error: action.payload\n            }\n        default: return state\n    }\n}\n\n\nexport default symbolsReducer","import { combineReducers } from 'redux'\n\nimport getCountryReducer from \"./reducers/country/getCountryReducer\"\nimport latestRatesReducer from './reducers/latestRates/latestRatesReducer'\nimport symbolsReducer from './reducers/symbols/symbolsReducer'\n\nconst rootReducer = combineReducers({\n    getCountry: getCountryReducer,\n    latestRates: latestRatesReducer,\n    symbols: symbolsReducer,\n})\n\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './rootReducer'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n\n\nconst store = createStore(rootReducer, applyMiddleware(logger, thunk))\n\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}